# #浅拷贝
# copy.copy()
# #深拷贝
# copy.deepcopy()
# #赋值
#  =
#字符串，数字

import copy
# a1 = 123123
# a2 = 123123
# print(id(a1))
# print(id(a2))
#如果数字或者字符串相同，python会指定相同的内存地址
# 数字、字符、列表等类型深浅拷贝是没有任何意义的
# 5984144
# 5984144


#其他包括，元组，列表，字典

#赋值，只是创建一个变量，该变量指向原来内存地址，如：
# n1 = {"k1": "wu", "k2": 123, "k3": ["alex", 456]}
# n2 = n1
# print(id(n1))
# print(id(n2))

#浅拷贝

n1 = {"k1": "wu", "k2": 123, "k3": ["alex", 456]}
n2 = copy.copy(n1)
print(id(n1))
print(id(n2))
print(n1)
print(n2)
print(id(n1['k3']))
print(id(n2['k3']))
# 输出的结果，发现，变量本身的id发生了变化，但是内容一样。
#通过k3的values的id相同，我们发现，浅拷贝，只拷贝创建了第一层数据，下面无论有多少层，都是没有单独创建的，共用内存地址
# 36029832
# 39759944
# {'k3': ['alex', 456], 'k2': 123, 'k1': 'wu'}
# {'k3': ['alex', 456], 'k2': 123, 'k1': 'wu'}
# 40155144
# 40155144